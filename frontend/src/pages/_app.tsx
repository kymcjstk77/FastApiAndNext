import dayjs from 'dayjs';
import 'dayjs/locale/ko';
dayjs.locale('ko');

import localFont from 'next/font/local';
import Head from 'next/head';
import { useEffect } from 'react';

import { queryClient } from '@/libs'; // 서버연동 및 설정등 기본 설정
import { TNextPageWithLayout } from '@/types'; //공통처리 영역UI/스크립트 설정
//import '../styles/styles_default.scss'; //css설정
import { AgGridReact } from 'ag-grid-react';
//import { AppProvider, useAppStore } from '@/stores';
import { QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import Layout from '@/components/Layout';  //공통 레이아웃


import App, { AppContext, AppInitialProps, AppProps } from 'next/app'  //기본제어구성
type AppPropsWithLayout = AppProps & {   //해석필요
  Component: TNextPageWithLayout;
};

const notoSansKr = localFont({
  src: [
    {
      path: '../../public/assets/fonts/NotoSansKR-Thin-Hestia.woff',
      weight: '100',
      style: 'normal',
    }
  ],
  display: 'swap',
  variable: '--font-noto',
}); //한글폰트설정

const roboto = localFont({
  src: [
    {
      path: '../../public/assets/fonts/Roboto-Thin.ttf',
      weight: '100',
      style: 'normal',
    }
  ],
  display: 'swap',
  variable: '--font-roboto',
}); //영문폰트설정

export default function Apps({
  Component,
  pageProps,
}: AppPropsWithLayout) {

  const getLayout = Component.PageLayout || ((page) => page);
  const userTyList = Component.userTyList || [];
  const authType = Component.authType;

  console.log('getLayout', getLayout);
  console.log('userTyList', userTyList);
  console.log('authType', Component.authType);

  return (    
        <>
        <Head>
            <title>title</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <style jsx global>
          {`
            
          `}
        </style>             
        <p>ddd</p>
        <QueryClientProvider client={queryClient}>
          <Layout className={(notoSansKr.variable, roboto.variable)}>{getLayout(<Component {...pageProps} userTy={Component.userTyList || []} />)}</Layout> 
          {/*Layout 공통적용영역*/}
        </QueryClientProvider>
        </>            
  )

}

Apps.getInitialProps = async (
  context: AppContext
): Promise<AppInitialProps> => {
  const ctx = await App.getInitialProps(context)
 
  return { ...ctx }
}